plugins {
    // Java library plugin – allows building JARs with classes
    `java-library`
    // Maven publishing plugin – allows uploading to Maven Central
    `maven-publish`
    // Signing plugin – required by Maven Central for GPG signature files
    signing
}

group = "com.diyawanna" // Your namespace (already verified with Sonatype)
version = "1.0.0"       // Update for each release

java {
    // Ensure compatibility
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    // Generate sources.jar and javadoc.jar (required for Maven Central)
    withSourcesJar()
    withJavadocJar()
}

repositories {
    // Use Maven Central for dependencies
    mavenCentral()
}

dependencies {
    // Jackson for JSON/YAML processing
    api("com.fasterxml.jackson.core:jackson-databind:2.17.0")
    api("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.17.0")
    api("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.17.0")

    // Apache Commons CSV for CSV processing
    api("org.apache.commons:commons-csv:1.10.0")

    // Apache POI for Excel processing
    api("org.apache.poi:poi:5.2.5")
    api("org.apache.poi:poi-ooxml:5.2.5")

    // SLF4J for logging facade
    api("org.slf4j:slf4j-api:2.0.13")

    // BouncyCastle for encryption (optional, can be shaded or provided by user)
    implementation("org.bouncycastle:bcprov-jdk18on:1.78")
    implementation("org.bouncycastle:bcpkix-jdk18on:1.78")

    // Apache Commons Compress for GZIP/ZIP
    api("org.apache.commons:commons-compress:1.26.1")

    // For JSON Schema validation
    api("com.networknt:json-schema-validator:1.3.3")

    // JUnit Jupiter for testing (uncommented for potential future use)
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.11.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.11.0")

    // Mockito for mocking in tests (uncommented for potential future use)
    testImplementation("org.mockito:mockito-core:5.11.0")
    testImplementation("org.mockito:mockito-junit-jupiter:5.11.0")
}

tasks.test {
    // Use JUnit Platform for running tests
    useJUnitPlatform()
}

publishing {
    publications {
        // "mavenJava" is the default publication for Java projects
        create<MavenPublication>("mavenJava") {
            from(components["java"]) // Publish the compiled Java component

            // Optional: explicit artifactId
            artifactId = "universal-file-toolkit"

            // POM metadata – required by Maven Central
            pom {
                name.set("Universal File Toolkit")
                description.set("A comprehensive Java library for file operations, format conversions, security, and more.")
                url.set("https://github.com/Diyawanna/java-universal-file-toolkit")

                licenses {
                    license {
                        name.set("The Apache License, Version 2.0")
                        url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
                    }
                }
                developers {
                    developer {
                        id.set("wsmr") // Your developer ID
                        name.set("Diyawanna") // Your full name
                        email.set("tech@diyawanna.com") // Contact email
                    }
                }
                scm {
                    connection.set("scm:git:git://github.com/Diyawanna/java-universal-file-toolkit.git")
                    developerConnection.set("scm:git:ssh://github.com:Diyawanna/java-universal-file-toolkit.git")
                    url.set("https://github.com/Diyawanna/java-universal-file-toolkit")
                }
            }
        }
    }

    repositories {
        maven {
            name = "sonatype"
            // Use the Central Portal OSSRH Staging API
            url = uri("https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/")

            // NEW Central Portal API endpoint
//            url = uri("https://central.sonatype.com/api/v1/publisher/upload")
            credentials {
                // Pull from gradle.properties
                username = findProperty("ossrhUsername") as String?
                password = findProperty("ossrhPassword") as String?
            }
        }
    }
}

signing {
    // Use GPG command line tool - much simpler approach
    useGpgCmd()
    sign(publishing.publications["mavenJava"])
}

// Configure jar task
tasks.jar {
    archiveBaseName.set("universal-file-toolkit")
    manifest {
        attributes(
            "Implementation-Title" to project.name,
            "Implementation-Version" to project.version,
            "Implementation-Vendor" to "Diyawanna"
        )
    }
}

// Configure javadoc task
tasks.javadoc {
    if (JavaVersion.current().isJava9Compatible) {
        (options as StandardJavadocDocletOptions).addBooleanOption("html5", true)
    }
}